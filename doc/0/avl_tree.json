{"dependencies":[{"uri":"out/ReleaseIA32/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"out/ReleaseIA32/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe [Iterator] class provides methods to iterate over an object. It\nis transparently used by the for-in construct to test for the end\nof the iteration, and to get the elements.\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe [Iterator] is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If there is no element left, then [moveNext]\nreturns false.\n\nA typical usage of an [Iterator] looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n","uri":"out/ReleaseIA32/dart-sdk/lib/core/iterator.dart","name":"Iterator","id":"Iterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","name":"moveNext","id":"moveNext0()","line":"35","kind":"method"},{"ref":{"refId":"dart.core/Iterator/E","name":"E"},"comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","name":"current","id":"current","line":"44","kind":"property"},{"name":"E","id":"E","kind":"typeparam"}],"line":"27","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n","uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"Iterable","id":"Iterable","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"comment":"\nReturns a lazy [Iterable] where each element [:e:] of [this] is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"51","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [f].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"63","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"comment":"\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"74","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"74","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nCheck whether the collection contains an element equal to [element].\n","name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nApplies the function [f] to each element of this collection.\n","name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"84","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"95","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"95","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"95","kind":"method"},{"comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"previousValue","id":"previousValue","line":"111","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"111","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"111","kind":"param"}],"line":"110","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if every elements of this collection satisify the\npredicate [f]. Returns false otherwise.\n","name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"117","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"separator","id":"separator","kind":"param"}],"line":"126","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if one element of this collection satisfies the\npredicate [f]. Returns false otherwise.\n","name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"136","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"136","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"List"},"comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements will be in iteration order. The list is fixed-length\nif [growable] is false.\n","name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"144","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Set"},"comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","name":"toSet","id":"toSet0()","line":"149","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if [this]\ncontains fewer than [n] elements.\n","name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"170","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of [this].\nWhen the iterator encounters an element [:e:] that does not satisfy [test],\nit discards [:e:] and moves into the finished state. That is, it will not\nask or provide any more elements.\n","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"181","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"181","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that skips the first [n] elements.\n\nIf [this] has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n","name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will iterate over all elements of [this].\nAs long as the iterator's elements do not satisfy [test] they are\ndiscarded. Once an element satisfies the [test] the iterator stops testing\nand uses every element unconditionally.\n","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"200","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"200","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the first element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"231","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"231","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the last element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is [:null:], a [StateError] is\nthrown.\n","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"240","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"240","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the single element that satisfies [f]. If no or more than one\nelement match then a [StateError] is thrown.\n","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"246","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"246","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the [index]th element.\n\nIf [this] [Iterable] has fewer than [index] elements throws a\n[RangeError].\n\nNote: if [this] does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in [this].\n","name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"258","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterator"},"comment":"\nReturns an [Iterator] that iterates over this [Iterable] object.\n","name":"iterator","id":"iterator","line":"39","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","name":"length","id":"length","line":"157","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if there is no element in this collection.\n","name":"isEmpty","id":"isEmpty","line":"162","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","name":"first","id":"first","line":"208","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","name":"last","id":"last","line":"215","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the single element in [this].\n\nIf [this] is empty or has more than one element throws a [StateError].\n","name":"single","id":"single","line":"222","kind":"property"},{"name":"Iterable","id":"Iterable0()","line":"20","kind":"constructor"},{"comment":"\nCreate an [Iterable] that generates its elements dynamically.\n\nThe [Iterators] created by the [Iterable] will count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an [Iterable], [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","name":"Iterable.generate","id":"Iterable.generate2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"generator","id":"generator","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/iterable.dart","name":"index","id":"index","line":"32","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"32","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"19","kind":"class"}],"line":"5","kind":"library"},{"uri":"out/ReleaseIA32/dart-sdk/lib/collection/collection.dart","name":"dart:collection","id":"dart.collection","children":[{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThis [Iterable] mixin implements all [Iterable] members except `iterator`.\n\nAll other methods are implemented in terms of `iterator`.\n","uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"IterableMixin","id":"IterableMixin","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","kind":"param"}],"kind":"functiontype"}],"kind":"param"}],"line":"13","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"},"name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"15","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"15","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"17","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"17","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"20","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"27","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"27","kind":"method"},{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"31","kind":"param"},{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"31","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"31","kind":"method"},{"name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"previousValue","id":"previousValue","line":"44","kind":"param"},{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"44","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"44","kind":"param"}],"line":"43","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"50","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"separator","id":"separator","kind":"param"}],"line":"57","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"75","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"75","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"List"},"name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"82","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Set"},"name":"toSet","id":"toSet0()","line":"85","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"},"name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"},"name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"102","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"102","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"},"name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"106","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableMixin/E","name":"E"}],"name":"Iterable"},"name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"110","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"110","kind":"method"},{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"142","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"142","kind":"method"},{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"151","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"151","kind":"method"},{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"uri":"out/ReleaseIA32/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"166","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"166","kind":"method"},{"returnType":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"183","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"87","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"96","kind":"property"},{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"first","id":"first","line":"114","kind":"property"},{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"last","id":"last","line":"122","kind":"property"},{"ref":{"refId":"dart.collection/IterableMixin/E","name":"E"},"name":"single","id":"single","line":"134","kind":"property"},{"name":"E","id":"E","kind":"typeparam"}],"line":"12","kind":"class"}],"line":"5","kind":"library"}],"comment":"\n`avl_tree` provides an implementation of an\n [AVL Tree](http://en.wikipedia.org/wiki/AVL_tree), a self-balancing\n binary search-tree.\n\nThe implementation is basically a port from the [implementation in Java\nby Justin Wheterell](https://code.google.com/p/java-algorithms-implementation/),\nextended with two additional featurs, see [AvlTree](AvlTree documentation).\n","uri":"file:///home/karl/repositories/dart-avl-tree/lib/avl_tree.dart","id":"avl_tree","children":[{"interfaces":[{"refId":"dart.core/Iterable","name":"Iterable"}],"superclass":{"refId":"avl_tree/Object_IterableMixin","name":"Object_IterableMixin"},"uri":"file:///home/karl/repositories/dart-avl-tree/lib/src/avl_tree.dart","name":"_InorderIterable","isPrivate":true,"id":"_InorderIterable","children":[{"ref":{"refId":"dart.core/Iterator","name":"Iterator"},"name":"iterator","id":"iterator","line":"973","kind":"property"},{"ref":{"refId":"dart.core/Iterator","name":"Iterator"},"name":"_iterator","isPrivate":true,"id":"_iterator","line":"959","kind":"variable"},{"name":"_InorderIterable.fromRoot","id":"_InorderIterable.fromRoot2()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode","name":"_AvlTreeNode"},"name":"root","id":"root","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"false","name":"withEquivalenceClasses","id":"withEquivalenceClasses","kind":"param"}],"line":"961","kind":"constructor"},{"name":"_InorderIterable.fromNode","id":"_InorderIterable.fromNode2()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode","name":"_AvlTreeNode"},"name":"node","id":"node","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"false","name":"withEquivalenceClasses","id":"withEquivalenceClasses","kind":"param"}],"line":"967","kind":"constructor"}],"line":"957","kind":"class"},{"interfaces":[{"refId":"dart.core/Iterator","name":"Iterator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"file:///home/karl/repositories/dart-avl-tree/lib/src/avl_tree.dart","name":"_InorderIterator","isPrivate":true,"id":"_InorderIterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"moveNext","id":"moveNext0()","line":"931","kind":"method"},{"name":"current","id":"current","line":"922","kind":"property"},{"name":"cursor","id":"cursor","line":"909","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isFirst","id":"isFirst","line":"910","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"name":"withEquivalenceClasses","id":"withEquivalenceClasses","line":"911","kind":"variable"},{"name":"_InorderIterator.fromRoot","id":"_InorderIterator.fromRoot2()","children":[{"name":"root","id":"root","kind":"param"},{"initializedField":{"refId":"avl_tree/_InorderIterator/withEquivalenceClasses","name":"withEquivalenceClasses"},"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"withEquivalenceClasses","id":"withEquivalenceClasses","kind":"param"}],"line":"912","kind":"constructor"},{"name":"_InorderIterator.fromNode","id":"_InorderIterator.fromNode2()","children":[{"name":"node","id":"node","kind":"param"},{"initializedField":{"refId":"avl_tree/_InorderIterator/withEquivalenceClasses","name":"withEquivalenceClasses"},"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"withEquivalenceClasses","id":"withEquivalenceClasses","kind":"param"}],"line":"918","kind":"constructor"}],"line":"908","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\n[AvlTree] is an implementation of a [AVL Tree]\n(http://en.wikipedia.org/wiki/AVL_tree),a self-balancing binary search-tree.\n\nThe implementation is basically a port from the [implementation in Java\nby Justin Wheterell]\n(https://code.google.com/p/java-algorithms-implementation/).\n\nThis implementation provides two custom features usually not present in\nAVL trees:\n\n1. The methods `add`, `remove`, or `contains` not only accept a value to be\n   added, removed, or tested,\n   but optionally also a compare function to be used in this very invocation\n   only.\n   This comes in handy, if a more efficient compare function can be\n   used in a specific invocation. Example: the dynamically changing search\n   tree of intersecting line segments in the\n   [Bentley-Ottman-Algorithm](http://en.wikipedia.org/wiki/Bentley%E2%80%93Ottmann_algorithm).\n\n2. The tree can (optionally) store multiple values which are equal with\n   respect\n   to the tree ordering, but not identical with respect to Darts `identical()`\n   function. One application is again the implementation of the Y-structure\n   in the [Bentley-Ottman-Algorithm](http://en.wikipedia.org/wiki/Bentley%E2%80%93Ottmann_algorithm),\n   where multiple overlapping line segments can be handled as equivalence\n   class of line segments.\n\n# A simple tree of ints\n\n     // create a tree, and use some methods, use the standard\n     // int.compareTo function for ordering\n     var tree = new AvlTree<int>();\n     tree.addAll([0,1,2]);\n     print(tree.inorder.toList());  // -> [0,1,2]\n     tree.remove(2);\n     print(tree.inorder.toList());  // -> [0,1]\n     print(tree.contains(0));       // true\n\n# A tree of strings  in reverse lexicographic order\n\n    // a balanced tree of strings, ordered in reverse lexicographical\n    // order\n    var order = (String s1, String s2) => s2.compareTo(s1);\n    var tree = new AvlTree<String>(compare: order);\n    tree.addAll([\"aaa\", \"zzz\"]);\n    print(tree.inorder.toList);     // [\"zzz\", \"aaa\"]\n\n# A tree of strings, lowercase ordering, with equivalence classes\n\n    lowerCaseCompare(s,t) => s.toLowerCase().compareTo(t.toLowerCase());\n    var tree = new AvlTree<String>(compare:lowerCaseCompare,\n        withEquivalenceClasses: true);\n    tree.addAll([\"aaa\", \"zzz\", \"AAA\"]);\n    print(tree.smallest);         // -> [\"aaa\", \"AAA\"]\n\n","uri":"file:///home/karl/repositories/dart-avl-tree/lib/src/avl_tree.dart","name":"AvlTree","id":"AvlTree","children":[{"isStatic":true,"name":"_require","isPrivate":true,"id":"_require2()","children":[{"name":"cond","id":"cond","kind":"param"},{"isOptional":true,"name":"msg","id":"msg","kind":"param"}],"line":"126","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds the [values] to the tree.\n\nIf supplied, [compare] is used to compare an element from\n[values] with a value already present in the tree.\n[compare] must be consistent with the ordering of values already\npresent in this tree, but it may supply a more efficient implementation\nof the comparison operation for this very invocation of [addAll].\n","name":"addAll","id":"addAll2()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"avl_tree/AvlTree/T","name":"T"}],"name":"Iterable"},"name":"values","id":"values","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"null","name":"compare","id":"compare","kind":"param"}],"line":"183","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds a [value] to the tree.\n\nIf supplied, [compare] is used to compare [value] with values already\npresent in the tree.\n[compare] must be consistent with the ordering of values already\npresent in this tree, but it may supply a more efficient implementation\nof the comparison operation for this very invocation of [add].\n\n","name":"add","id":"add2()","children":[{"ref":{"refId":"avl_tree/AvlTree/T","name":"T"},"name":"value","id":"value","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"null","name":"compare","id":"compare","kind":"param"}],"line":"198","kind":"method"},{"isStatic":true,"name":"_forEachAncestor","isPrivate":true,"id":"_forEachAncestor2()","children":[{"name":"node","id":"node","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"doit","id":"doit","children":[{"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"file:///home/karl/repositories/dart-avl-tree/lib/src/avl_tree.dart","name":"n","id":"n","line":"264","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"264","kind":"method"},{"comment":"\nBalance the sub-tree with root [node]  according to the AVL post-insert\nalgorithm.\n","name":"_balanceAfterInsert","isPrivate":true,"id":"_balanceAfterInsert1()","children":[{"name":"node","id":"node","kind":"param"}],"line":"274","kind":"method"},{"comment":"\nRotate tree left at sub-tree rooted at [node]\n","name":"_rotateLeft","isPrivate":true,"id":"_rotateLeft1()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/AvlTree/T","name":"T"}],"name":"_AvlTreeNode"},"name":"node","id":"node","kind":"param"}],"line":"326","kind":"method"},{"comment":"\nRotate tree right at sub-tree rooted at [node].\n","name":"_rotateRight","isPrivate":true,"id":"_rotateRight1()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/AvlTree/T","name":"T"}],"name":"_AvlTreeNode"},"name":"node","id":"node","kind":"param"}],"line":"359","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nRemoves the [value] from the tree.\n\nReturns true if the [value] was removed, false otherwise.\n\nIf supplied, [compare] is used to compare [value] with values already\npresent in the tree.\n[compare] must be consistent with the ordering of values already\npresent in this tree, but it may supply a more efficient implementation\nof the comparison operation for this very invocation of [remove].\n","name":"remove","id":"remove2()","children":[{"ref":{"refId":"avl_tree/AvlTree/T","name":"T"},"name":"value","id":"value","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"null","name":"compare","id":"compare","kind":"param"}],"line":"401","kind":"method"},{"comment":"\nReplace [node] with [replacement] in the tree.\n","name":"_replaceNodeWithNode","isPrivate":true,"id":"_replaceNodeWithNode2()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/AvlTree/T","name":"T"}],"name":"_AvlTreeNode"},"name":"node","id":"node","kind":"param"},{"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/AvlTree/T","name":"T"}],"name":"_AvlTreeNode"},"name":"replacement","id":"replacement","kind":"param"}],"line":"447","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true, if the tree contains [value].\n\nIf supplied, [compare] is used to compare [value] with values already\npresent in the tree.\n[compare] must be consistent with the ordering of values already\npresent in this tree, but it may supply a more efficient implementation\nof the comparison operation for this very invocation of [contains].\n","name":"contains","id":"contains2()","children":[{"ref":{"refId":"avl_tree/AvlTree/T","name":"T"},"name":"value","id":"value","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"null","name":"compare","id":"compare","kind":"param"}],"line":"509","kind":"method"},{"comment":"\nLocate the node with [value] in the tree.\n","name":"_lookupNode","isPrivate":true,"id":"_lookupNode2()","children":[{"ref":{"refId":"avl_tree/AvlTree/T","name":"T"},"name":"value","id":"value","kind":"param"},{"name":"compare","id":"compare","kind":"param"}],"line":"566","kind":"method"},{"comment":"\nGet the proper replacement node according to the binary search tree\nalgorithm from the tree.\n","name":"_lookupReplacementNode","isPrivate":true,"id":"_lookupReplacementNode1()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/AvlTree/T","name":"T"}],"name":"_AvlTreeNode"},"name":"node","id":"node","kind":"param"}],"line":"587","kind":"method"},{"isStatic":true,"comment":"\nGet greatest node in sub-tree rooted at [node]. Returns\n[node] if [node] has no right subtree. Returns null, if\n[node] is null.\n","name":"_lookupRightMostLeaf","isPrivate":true,"id":"_lookupRightMostLeaf1()","children":[{"name":"node","id":"node","kind":"param"}],"line":"614","kind":"method"},{"isStatic":true,"comment":"\nGet smallest node in sub-tree rooted at [node]. Returns\n[node] if [node] has no left subtree. Returns null, if\n[node] is null.\n","name":"_lookupLeftMostLeaf","isPrivate":true,"id":"_lookupLeftMostLeaf1()","children":[{"name":"node","id":"node","kind":"param"}],"line":"625","kind":"method"},{"comment":"\nBalance the sub-tree with root [node] according to the AVL post-delete\nalgorithm.\n","name":"_balanceAfterDelete","isPrivate":true,"id":"_balanceAfterDelete1()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/AvlTree/T","name":"T"}],"name":"_AvlTreeNode"},"name":"node","id":"node","kind":"param"}],"line":"635","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[],"name":"Iterable"},"comment":"\nReturns an iterable\n of the values starting with the first\nnode which is equal according to [reference] and consisting\nof all values equal or larger with respect to [reference].\n\n[reference] is either a value of type [T] or a function\n`int order(T treevalue)` which returns -1, 0, or 1 depending on\nwether the value `treevalue` of a tree node is smaller, equal,\nor larger as the reference point.\n\nThe standard case is to invoke it with a value of type [T]. The\nsecond option is useful in special usage scenarios only, see notes\nin the class description.\n\nIf this tree supports equivalence classes, it returns\nan [Iterable] of [: List[T] :], otherwise an [Iterable]\nof [T].\n\nRetuns an empty [Iterable] if there is no such equivalence class.\n","name":"inorderEqualOrLarger","id":"inorderEqualOrLarger1()","children":[{"name":"reference","id":"reference","kind":"param"}],"line":"711","kind":"method"},{"comment":"\nReturns the smallest value in the tree which is larger than\n[reference].\n\n[reference] is either a value of type [T] or a function\n`int order(T other)` which returns -1, 0, or 1 depending on\nwether the value `other` in a tree node is smaller, equal,\nor larger as the reference point.\n\nThe standard case is to invoke it with a value of type [T]. The\nsecond option is useful in special usage scenarios only, see notes\nin the class description.\n\nThe returned value is either:\n\n* `null`, if this tree is empty\n* a single value of type [T], if this tree doesn't\n  support equivalence classes\n* a list of type [: List[T] :], if this tree does\n  support equivalence classes\n\n","name":"rightNeighbour","id":"rightNeighbour1()","children":[{"name":"reference","id":"reference","kind":"param"}],"line":"745","kind":"method"},{"returnType":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/AvlTree/T","name":"T"}],"name":"_AvlTreeNode"},"name":"_rightNeighbourNode","isPrivate":true,"id":"_rightNeighbourNode1()","children":[{"name":"reference","id":"reference","kind":"param"}],"line":"755","kind":"method"},{"comment":"\nReturns the largest value in the tree which is smaller than\n[reference].\n\n[reference] is either a value of type [T] or a function\n`int order(T other)` which returns -1, 0, or 1 depending on\nwether the value `other` in a tree node is smaller, equal,\nor larger as the reference point.\n\nThe standard case is to invoke it with a value of type [T]. The\nsecond option is useful in special usage scenarios only, see notes\nin the class description.\n\nThe returned value is either:\n\n* `null`, if this tree is empty\n* a single value of type [T], if this tree doesn't\n  support equivalence classes\n* a list of type [: List[T] :], if this tree does\n  support equivalence classes\n\n","name":"leftNeighbour","id":"leftNeighbour1()","children":[{"name":"reference","id":"reference","kind":"param"}],"line":"828","kind":"method"},{"returnType":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/AvlTree/T","name":"T"}],"name":"_AvlTreeNode"},"name":"_leftNeighbourNode","isPrivate":true,"id":"_leftNeighbourNode1()","children":[{"name":"reference","id":"reference","kind":"param"}],"line":"838","kind":"method"},{"name":"_dump","isPrivate":true,"id":"_dump0()","line":"888","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"returns the size of the tree","name":"length","id":"length","line":"169","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Return true if the tree is empty","name":"isEmpty","id":"isEmpty","line":"172","kind":"property"},{"comment":"\nReturns the smallest value in the tree.\n\nThe returned value is either:\n\n* `null`, if this tree is empty\n* a single value of type [T], if this tree doesn't\n  support equivalence classes\n* a list of type [: List[T] :], if this tree does\n  support equivalence classes\n\n","name":"smallest","id":"smallest","line":"529","kind":"property"},{"comment":"\nReturns the largest value in the tree.\n\nThe returned value is either:\n\n* `null`, if this tree is empty\n* a single value of type [T], if this tree doesn't\n  support equivalence classes\n* a list of type [: List[T] :], if this tree does\n  support equivalence classes\n","name":"largest","id":"largest","line":"552","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[],"name":"Iterable"},"comment":"\nReturns an iterable of all values traversing the tree\ninorder. This is equivalent to an iterable of the\nsorted values in the tree.\n\nIf this tree supports equivalence classes, it returns\nan [Iterable] of [: List[T] :], otherwise an [Iterable]\nof [T].\n\nReturns an empty [Iterable] if the tree is empty.\n","name":"inorder","id":"inorder","line":"687","kind":"property"},{"isStatic":true,"name":"_LEFT_LEFT","isPrivate":true,"id":"_LEFT_LEFT","line":"131","kind":"variable"},{"isStatic":true,"name":"_LEFT_RIGHT","isPrivate":true,"id":"_LEFT_RIGHT","line":"132","kind":"variable"},{"isStatic":true,"name":"_RIGHT_LEFT","isPrivate":true,"id":"_RIGHT_LEFT","line":"133","kind":"variable"},{"isStatic":true,"name":"_RIGHT_RIGHT","isPrivate":true,"id":"_RIGHT_RIGHT","line":"134","kind":"variable"},{"isStatic":true,"name":"_NONE","isPrivate":true,"id":"_NONE","line":"136","kind":"variable"},{"isStatic":true,"name":"_LEFT","isPrivate":true,"id":"_LEFT","line":"137","kind":"variable"},{"isStatic":true,"name":"_RIGHT","isPrivate":true,"id":"_RIGHT","line":"138","kind":"variable"},{"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/AvlTree/T","name":"T"}],"name":"_AvlTreeNode"},"name":"_root","isPrivate":true,"id":"_root","line":"140","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_size","isPrivate":true,"id":"_size","line":"141","kind":"variable"},{"name":"_compare","isPrivate":true,"id":"_compare","line":"143","kind":"variable"},{"name":"_withEquivalenceClasses","isPrivate":true,"id":"_withEquivalenceClasses","line":"144","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_lookupRightMost","isPrivate":true,"id":"_lookupRightMost","line":"582","kind":"variable"},{"comment":"\nCreates an AVL tree.\n\n[compare] is an optional compare function for two values of\ntype [T]. If missing or null, T must extend [Comparable] and\nthe tree compares two values `v1` and `v2` using `T`s\n`compareTo` function.\n\nIf [withEquivalenceClasses] is true, the tree stores multiple values\nwhich are equal with respect to `compare` but not identical with\nrespect to Darts `identical()`-function. In this case a tree node\nbecome multi-valued.\n","name":"AvlTree","id":"AvlTree2()","children":[{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"compare","id":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"uri":"out/ReleaseIA32/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"avl_tree/AvlTree/T","name":"T"},"uri":"file:///home/karl/repositories/dart-avl-tree/lib/src/avl_tree.dart","name":"v1","id":"v1","line":"159","kind":"param"},{"ref":{"refId":"avl_tree/AvlTree/T","name":"T"},"uri":"file:///home/karl/repositories/dart-avl-tree/lib/src/avl_tree.dart","name":"v2","id":"v2","line":"159","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"false","name":"withEquivalenceClasses","id":"withEquivalenceClasses","kind":"param"}],"line":"159","kind":"constructor"},{"name":"T","id":"T","kind":"typeparam"}],"line":"124","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"file:///home/karl/repositories/dart-avl-tree/lib/src/avl_tree.dart","name":"_AvlTreeNode","isPrivate":true,"id":"_AvlTreeNode","children":[{"name":"_updateHeight","isPrivate":true,"id":"_updateHeight0()","line":"28","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"containsIdentical","id":"containsIdentical1()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode/T","name":"T"},"name":"value","id":"value","kind":"param"}],"line":"42","kind":"method"},{"name":"addEquivalent","id":"addEquivalent1()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode/T","name":"T"},"name":"value","id":"value","kind":"param"}],"line":"46","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"removeEquivalent","id":"removeEquivalent1()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode/T","name":"T"},"name":"value","id":"value","kind":"param"}],"line":"54","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturn balance factor for this node. If the return value is negative,\nthe left subtree is higher than the right subtree, if it is 0, both\nthe subtrees have the same height, if is positive, the right subtree\nis heigher than the left subtree.\n","name":"_balanceFactor","isPrivate":true,"id":"_balanceFactor","line":"22","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isRoot","id":"isRoot","line":"34","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isLeaf","id":"isLeaf","line":"35","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"hasSingleValue","id":"hasSingleValue","line":"37","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"hasMultipleValues","id":"hasMultipleValues","line":"38","kind":"property"},{"ref":{"refId":"avl_tree/_AvlTreeNode/T","name":"T"},"name":"compareValue","id":"compareValue","line":"40","kind":"property"},{"name":"values","id":"values","line":"63","kind":"property"},{"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/_AvlTreeNode/T","name":"T"}],"name":"_AvlTreeNode"},"name":"parent","id":"parent","line":"4","kind":"variable"},{"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/_AvlTreeNode/T","name":"T"}],"name":"_AvlTreeNode"},"name":"left","id":"left","line":"5","kind":"variable"},{"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/_AvlTreeNode/T","name":"T"}],"name":"_AvlTreeNode"},"name":"right","id":"right","line":"6","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"height","id":"height","line":"7","kind":"variable"},{"name":"_values","isPrivate":true,"id":"_values","line":"10","kind":"variable"},{"name":"_AvlTreeNode","id":"_AvlTreeNode2()","children":[{"ref":{"refId":"avl_tree/_AvlTreeNode/T","name":"T"},"name":"value","id":"value","kind":"param"},{"initializedField":{"refId":"avl_tree/_AvlTreeNode/parent","name":"parent"},"ref":{"refId":"avl_tree/_AvlTreeNode","arguments":[{"refId":"avl_tree/_AvlTreeNode/T","name":"T"}],"name":"_AvlTreeNode"},"name":"parent","id":"parent","kind":"param"}],"line":"12","kind":"constructor"},{"name":"T","id":"T","kind":"typeparam"}],"line":"3","kind":"class"}],"line":"10","kind":"library"}